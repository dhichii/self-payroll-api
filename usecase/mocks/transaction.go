// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "self-payrol/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, limit, offset
func (_m *TransactionRepository) Fetch(ctx context.Context, limit int, offset int) ([]*model.Transaction, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []*model.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*model.Transaction); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionRepository(t testing.TB) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
